# Installs and configures InfluxDB to be a host for Telegraf metrics
# and to let Chronograf and Kapacitor connect to it with their own users

- name: Install InfluxDB package
  apt:
    name: influxdb
    state: present

- name: Create InfluxDB data dir with correct permissions
  file:
    name: "{{ influxdb_data_dir }}"
    owner: influxdb
    group: influxdb
    mode: 0755
    state: directory

- name: Make sure InfluxDB is started (for following tasks)
  service:
    name: influxdb
    state: started

- name: Pause for a second to wait for service coming up
  pause:
    seconds: 2

- name: Test if InfluxDB is running
  shell: "curl --silent -I http://{{ influxdb_host }}:{{ influxdb_port}}/ping"
  args:
    warn: false
  register: curl_result

- name: InfluxDB request response
  debug:
    var: curl_result.stdout_lines

# -- Admin user Creation (when not in restore backup mode and when auth is still off) --

- name: Check if auth is already switched on (from previous run/install)
  uri:
    url: "http://{{ influxdb_host }}:{{ influxdb_port}}/query"
    return_content: yes
    status_code:
      - 200
      - 400
      - 401
  register: query_result

- name: Determine result of auth check (if we are not in restore mode)
  set_fact:
    influxdb_auth_status: "{{ query_result.json['error'] }}"
  when:
    - influxdb_meta_backup is undefined
    - query_result is defined

- name: Create InfluxDB admin user (if auth is off)
  influxdb_user:
    # Connection details:
    hostname:       "{{ influxdb_host }}"
    port:           "{{ influxdb_port }}"
    # User setup:
    user_name:      "{{ influxdb_admin_user }}"
    user_password:  "{{ influxdb_admin_pw }}"
    admin: true
    state: present
  register: admin_user_creation
  when:
    - influxdb_auth_status is defined
    - influxdb_auth_status != 'unable to parse authentication credentials'

# -- Configuration and Restore (if in restore mode) --

- name: Stop the InfluxDB server before configuration/restore
  service:
    name: influxdb
    state: stopped

- name: Configure InfluxDB (also enables auth)
  template:
    src: influxdb.conf.j2
    dest: /etc/influxdb/influxdb.conf

- name: Use backup for setting up users/DBs settings (intead of creating them with Ansible)
  copy:
    src: '{{ influxdb_meta_backup }}'
    dest: '/home/ubuntu/backup/'
  when: influxdb_meta_backup is defined

- shell: influxd restore -metadir {{ influxdb_meta_dir }} /home/ubuntu/backup/
  when: influxdb_meta_backup is defined
  register: restore_output

- name: Restore output
  debug:
    var: restore_output
  when: influxdb_meta_backup is defined

# --- Initial setup of Dabases and users for Telegraf and Chronograf (if not in restore mode) ---

- name: Start the InfluxDB server again
  service:
    name: influxdb
    enabled: yes
    state: started

- name: Wait for the influxdb service to come up
  uri:
    url: "http://{{ influxdb_host }}:{{ influxdb_port }}/status"
    status_code: 200,204
  retries: 20
  delay: 5
  register: check_result
  until: check_result.status == 204
  changed_when: false

- name: Create telegraf, Prometheus and chronograf DBs
  influxdb_database:
    # Connection details:
    hostname:       "{{ influxdb_host }}"
    port:           "{{ influxdb_port }}"
    username:       "{{ influxdb_admin_user }}"
    password:       "{{ influxdb_admin_pw }}"
    # DB setup:
    database_name:  "{{ item }}"
    state: present
  with_items:
    - "{{ influxdb_telegraf_db }}"
    - "{{ influxdb_prometheus_db }}"
    - "{{ influxdb_chronograf_db }}"
  when: influxdb_meta_backup is undefined

- name: Create retention policy for telegraf DB
  influxdb_retention_policy:
    # Connection details:
    hostname:       "{{ influxdb_host }}"
    port:           "{{ influxdb_port }}"
    username:       "{{ influxdb_admin_user }}"
    password:       "{{ influxdb_admin_pw }}"
    database_name:  "{{ influxdb_telegraf_db }}"
    # policy setup:
    policy_name: "{{ telegraf_retention_policy_name }}"
    duration: "{{ telegraf_retention_time }}"
    replication: 1
    default: true
  when: influxdb_meta_backup is undefined

- name: Create retention policy for prometheus DB
  influxdb_retention_policy:
    # Connection details:
    hostname:       "{{ influxdb_host }}"
    port:           "{{ influxdb_port }}"
    username:       "{{ influxdb_admin_user }}"
    password:       "{{ influxdb_admin_pw }}"
    database_name:  "{{ influxdb_prometheus_db }}"
    # policy setup:
    policy_name: "{{ prometheus_retention_policy_name }}"
    duration: "{{ prometheus_retention_time }}"
    replication: 1
    default: true
  when: influxdb_meta_backup is undefined


- name: Create InfluxDB chronograf user for Chronograf app access
  influxdb_user:
    # Connection details:
    hostname:       "{{ influxdb_host }}"
    port:           "{{ influxdb_port }}"
    login_username: "{{ influxdb_admin_user }}"
    login_password: "{{ influxdb_admin_pw }}"
    # User setup:
    user_name:      "{{ influxdb_chronograf_user }}"
    user_password:  "{{ influxdb_chronograf_pw }}"
    state: present
  when: influxdb_meta_backup is undefined

- name: Grant access to telegraf and chronograf DBs for chronograf user
  influxdb_query:
    # Connection details:
    hostname:       "{{ influxdb_host }}"
    port:           "{{ influxdb_port }}"
    database_name:  "{{ item }}"
    username:       "{{ influxdb_admin_user }}"
    password:       "{{ influxdb_admin_pw }}"
    # GRANT access query:
    query: "GRANT ALL ON {{ item }} TO {{ influxdb_chronograf_user }}"
  with_items:
    - "{{ influxdb_telegraf_db }}"
    - "{{ influxdb_chronograf_db }}"
  when: influxdb_meta_backup is undefined

- name: Create InfluxDB user for the telegraf agents
  influxdb_user:
    # Connection details:
    hostname:       "{{ influxdb_host }}"
    port:           "{{ influxdb_port }}"
    login_username: "{{ influxdb_admin_user }}"
    login_password: "{{ influxdb_admin_pw }}"
    # User setup:
    user_name:      "{{ influxdb_telegraf_user }}"
    user_password:  "{{ influxdb_telegraf_pw }}"
    state: present
  when: influxdb_meta_backup is undefined

- name: Grant access to telegraf user to WRITE to telegraf DB
  influxdb_query:
    # Connection details:
    hostname:       "{{ influxdb_host }}"
    port:           "{{ influxdb_port }}"
    database_name:  "{{ influxdb_telegraf_db }}"
    username:       "{{ influxdb_admin_user }}"
    password:       "{{ influxdb_admin_pw }}"
    # GRANT access query:
    query: "GRANT WRITE ON {{ influxdb_telegraf_db }} TO {{ influxdb_telegraf_user }}"
  when: influxdb_meta_backup is undefined